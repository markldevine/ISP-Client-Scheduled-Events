#!/usr/bin/env raku

use ISP::Server::Reporter;

my regex date-time-regex    {
                                ^
                                $<month>        = (\d\d)
                                '/'
                                $<day-of-month> = (\d\d)
                                '/'
                                $<year>         = (\d+)
                                \s+
                                $<hour>         = (\d\d)
                                ':'
                                $<minute>       = (\d\d)
                                ':'
                                $<second>       = (\d\d)
                                $
                            }

class Reporter does ISP::Server::Reporter {

    has $.domain;
    has $.node;

    method process-rows (@events) {
        my Str      $policy-domain-name;                                # Policy Domain Name: BA
        my Str      $schedule-name;                                     #      Schedule Name: SCH_1600
        my Str      $node-name;                                         #          Node Name: ISP01
        my Str      $status;                                            #    Scheduled Start: 02/06/23   16:00:00
        my DateTime $scheduled-start;                                   #       Actual Start: 02/06/23   16:00:52
        my DateTime $actual-start;                                      #          Completed: 02/06/23   16:04:21
        my DateTime $completed;                                         #             Status: Completed
        my Str      $duration;                                          # *calculated*
        my Str      $result;                                            #             Result: 4
        my Str      $reason;                                            #             Reason: The operation completed successfully, but some files were not processed.

        for @events -> $event {
            $node-name              = $event{'Node Name'}.Str           if $event{'Node Name'};
            if self.node {
                next unless self.node.uc eq $node-name.uc;
            }
            $policy-domain-name     = $event{'Policy Domain Name'}.Str  if $event{'Policy Domain Name'};
#%%%        if $!domain
            $schedule-name          = $event{'Schedule Name'}.Str       if $event{'Schedule Name'};
            $status                 = $event{'Status'}.Str              if $event{'Reason'};
            $scheduled-start        = Nil;
            if $event{'Scheduled Start'} && $event{'Scheduled Start'} ~~ /<date-time-regex>/ {
                $scheduled-start    = DateTime.new(
                                                    :month($<date-time-regex><month>),
                                                    :day($<date-time-regex><day-of-month>),
                                                    :year($<date-time-regex><year> < 100 ?? +$<date-time-regex><year> + 2000 !! +$<date-time-regex><year>),
                                                    :hour($<date-time-regex><hour>),
                                                    :minute($<date-time-regex><minute>),
                                                    :second($<date-time-regex><second>),
                                                );
            }
            $actual-start           = Nil;
            if $event{'Actual Start'} && $event{'Actual Start'} ~~ /<date-time-regex>/ {
                $actual-start       = DateTime.new(
                                                    :month($<date-time-regex><month>),
                                                    :day($<date-time-regex><day-of-month>),
                                                    :year($<date-time-regex><year> < 100 ?? +$<date-time-regex><year> + 2000 !! +$<date-time-regex><year>),
                                                    :hour($<date-time-regex><hour>),
                                                    :minute($<date-time-regex><minute>),
                                                    :second($<date-time-regex><second>),
                                                );
            }
            $completed              = Nil;
            if $event{'Completed'} && $event{'Completed'} ~~ /<date-time-regex>/ {
                $completed          = DateTime.new(
                                                    :month($<date-time-regex><month>),
                                                    :day($<date-time-regex><day-of-month>),
                                                    :year($<date-time-regex><year> < 100 ?? +$<date-time-regex><year> + 2000 !! +$<date-time-regex><year>),
                                                    :hour($<date-time-regex><hour>),
                                                    :minute($<date-time-regex><minute>),
                                                    :second($<date-time-regex><second>),
                                                );
            }
            $duration               = Nil;
            $duration               = DateTime.new($completed - $actual-start).hh-mm-ss if $completed && $actual-start;
            $result                 = $event{'Result'}.Str              if $event{'Result'};
            $reason                 = $event{'Reason'}.Str              if $event{'Reason'};
            given $!table {
                .add-row: [
                            $policy-domain-name ?? $policy-domain-name  !! ' ',
                            $schedule-name      ?? $schedule-name       !! ' ',
                            $node-name          ?? $node-name           !! ' ',
                            $status             ?? $status              !! ' ',
                            $scheduled-start    ?? $scheduled-start.Str !! ' ',
                            $actual-start       ?? $actual-start.Str    !! ' ',
                            $completed          ?? $completed.Str       !! ' ',
                            $duration           ?? $duration            !! ' ',
                            $result             ?? $result              !! ' ',
                            $reason             ?? $reason              !! ' ',
                          ];
            }
        }
    }
}

sub MAIN (
    Str:D   :$isp-server!,                              #= ISP server name
    Str:D   :$isp-admin!,                               #= ISP server name
    Int:D   :$interval      where * >= 5        = 58,   #= Refresh every --interval seconds (minimum 5s)
    Int:D   :$count                             = 1,    #= Number of refreshes (0 is infinity)
    Bool    :$grid,                                     #= Full table grid
    Bool    :$clear,                                    #= Clear the screen with each iteration
    Int:D   :$days                              = 0,    #= BEGINDATE=TODAY-days
    Str:D   :$domain                            = '*',  #= ISP DOMAIN name
    Str     :$node,                                     #= ISP NODE name
    Bool    :$sort-by-node,                             #= Sort output by Node Name
    Int     :$window-hour   where 0 <= * <= 24,         #= Daily backup window hour
) {
    my @command         = ['QUERY', 'EVENT', $domain, '*', 'BEGINDATE=TODAY-' ~ $days, 'ENDDATE=TODAY', 'FORMAT=DETAILED'];
    with $window-hour {
        my $d           = DateTime.new(now);
        my $start-time  = DateTime.new(:year($d.year), :month($d.month), :day($d.day), :hour($window-hour), :0minute);
        my $end-time    = DateTime.new(:year($d.year), :month($d.month), :day($d.day), :hour($window-hour), :0minute).earlier(:seconds((60 * 60 * 24) + 1));
        @command.append: 'BEGINTIME='   ~ $start-time.hh-mm-ss;
        @command.append: 'ENDTIME='     ~ $end-time.hh-mm-ss if $days;
    }
    my @fields;
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Policy Domain Name'),   :alignment('l'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Schedule Name'),        :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Node Name'),            :alignment('l'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Status'),               :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Scheduled Start'),      :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Actual Start'),         :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Completed'),            :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Duration'),             :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Result'),               :alignment('c'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Reason'),               :alignment('l'));
    my $sort-by     = 'Scheduled Start';
    $sort-by        = 'Node Name' if $sort-by-node;
    my $reporter    = Reporter.new(
                                    :$isp-server,
                                    :$isp-admin,
                                    :$count,
                                    :$grid,
                                    :$clear,
                                    :$interval,
                                    :title('IBM Spectrum Protect: ' ~ $isp-server ~ ' Client Events'),
                                    :@command,
                                    :@fields,
                                    :$domain,
                                    :$node,
                                    :$sort-by,
                                  );
    $reporter.loop;
}

=finish
