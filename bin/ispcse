#!/usr/bin/env raku

#use lib '/home/mdevine/github.com/raku-Our-Utilities/lib';
#use lib '/home/mdevine/github.com/raku-Our-Grid/lib';
#use lib '/home/mdevine/github.com/ISP-Server-Reporter-Role/lib';
#use lib '/home/mdevine/github.com/ISP-dsmadmc/lib';

use ISP::Server::Reporter;
use Our::Grid;
use Our::Grid::Cell;
use Our::Utilities;

my regex date-time-regex    {
                                ^
                                $<month>        = (\d\d)
                                '/'
                                $<day-of-month> = (\d\d)
                                '/'
                                $<year>         = (\d+)
                                \s+
                                $<hour>         = (\d\d)
                                ':'
                                $<minute>       = (\d\d)
                                ':'
                                $<second>       = (\d\d)
                                $
                            }

class Reporter does ISP::Server::Reporter {

    has $.domain;
    has $.node;

    method process-headings () {
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Policy Domain Name'), :justification<left>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Schedule Name'),      :justification<center>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Node Name'),          :justification<left>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Status'),             :justification<center>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Scheduled Start'),    :justification<center>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Actual Start'),       :justification<center>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Completed'),          :justification<center>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Duration'),           :justification<center>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Result'),             :justification<center>);
        $!grid.add-heading: :cell(Our::Grid::Cell.new: :text('Reason'),             :justification<left>);
    }

    method process-rows ($events) {
        my Str      $policy-domain-name;                                # Policy Domain Name: BA
        my Str      $schedule-name;                                     #      Schedule Name: SCH_1600
        my Str      $node-name;                                         #          Node Name: ISP01
        my Str      $status;                                            #    Scheduled Start: 02/06/23   16:00:00
        my DateTime $scheduled-start;                                   #       Actual Start: 02/06/23   16:00:52
        my DateTime $actual-start;                                      #          Completed: 02/06/23   16:04:21
        my DateTime $completed;                                         #             Status: Completed
        my Str      $duration;                                          # *calculated*
        my Str      $result;                                            #             Result: 4
        my Str      $reason;                                            #             Reason: The operation completed successfully, but some files were not processed.

        for $events.list -> $event {
            $node-name              = '';
            $node-name              = $event{'Node Name'}.Str           if $event{'Node Name'};
            if self.node {
                next unless self.node.uc eq $node-name.uc;
            }
            $policy-domain-name     = '';
            $policy-domain-name     = $event{'Policy Domain Name'}.Str  if $event{'Policy Domain Name'};
            $schedule-name          = '';
            $schedule-name          = $event{'Schedule Name'}.Str       if $event{'Schedule Name'};
            $status                 = '';
            $status                 = $event{'Status'}.Str              if $event{'Status'};
            $scheduled-start        = Nil;
            if $event{'Scheduled Start'} && $event{'Scheduled Start'} ~~ /<date-time-regex>/ {
                $scheduled-start    = DateTime.new(
                                                    :month($<date-time-regex><month>),
                                                    :day($<date-time-regex><day-of-month>),
                                                    :year($<date-time-regex><year> < 100 ?? +$<date-time-regex><year> + 2000 !! +$<date-time-regex><year>),
                                                    :hour($<date-time-regex><hour>),
                                                    :minute($<date-time-regex><minute>),
                                                    :second($<date-time-regex><second>),
                                                );
            }
            $actual-start           = Nil;
            if $event{'Actual Start'} && $event{'Actual Start'} ~~ /<date-time-regex>/ {
                $actual-start       = DateTime.new(
                                                    :month($<date-time-regex><month>),
                                                    :day($<date-time-regex><day-of-month>),
                                                    :year($<date-time-regex><year> < 100 ?? +$<date-time-regex><year> + 2000 !! +$<date-time-regex><year>),
                                                    :hour($<date-time-regex><hour>),
                                                    :minute($<date-time-regex><minute>),
                                                    :second($<date-time-regex><second>),
                                                );
            }
            $completed              = Nil;
            if $event{'Completed'} && $event{'Completed'} ~~ /<date-time-regex>/ {
                $completed          = DateTime.new(
                                                    :month($<date-time-regex><month>),
                                                    :day($<date-time-regex><day-of-month>),
                                                    :year($<date-time-regex><year> < 100 ?? +$<date-time-regex><year> + 2000 !! +$<date-time-regex><year>),
                                                    :hour($<date-time-regex><hour>),
                                                    :minute($<date-time-regex><minute>),
                                                    :second($<date-time-regex><second>),
                                                );
            }
            $duration               = Nil;
            $duration               = DateTime.new($completed - $actual-start).hh-mm-ss if $completed && $actual-start;
            $result                 = '';
            $result                 = $event{'Result'}.Str              if $event{'Result'};
            $reason                 = '';
            $reason                 = $event{'Reason'}.Str              if $event{'Reason'};
            $!grid.add-cell: $policy-domain-name ?? $policy-domain-name  !! ' ', :justification<left>;
            $!grid.add-cell: $schedule-name      ?? $schedule-name       !! ' ', :justification<center>;
            $!grid.add-cell: $node-name          ?? $node-name           !! ' ', :justification<left>;
            given $status {
                when 'Started'       {
                    $!grid.add-cell: $status     ?? $status              !! ' ', :justification<center>, :foreground<green>;
                }
                when 'Failed'       {
                    $!grid.add-cell: $status     ?? $status              !! ' ', :justification<center>, :foreground<orange>;
                }
                when 'Missed'       {
                    $!grid.add-cell: $status     ?? $status              !! ' ', :justification<center>, :foreground<red>;
                }
                default             {
                    $!grid.add-cell: $status     ?? $status              !! ' ', :justification<center>;
                }
            }
            $!grid.add-cell: $scheduled-start    ?? $scheduled-start.month.fmt("%02d")   ~ '/' ~ $scheduled-start.day.fmt("%02d")    ~ ' @' ~ $scheduled-start.hh-mm-ss  !! ' ', :justification<center>;
            $!grid.add-cell: $actual-start       ?? $actual-start.month.fmt("%02d")      ~ '/' ~ $actual-start.day.fmt("%02d")       ~ ' @' ~ $actual-start.hh-mm-ss     !! ' ', :justification<center>;
            $!grid.add-cell: $completed          ?? $completed.month.fmt("%02d")         ~ '/' ~ $completed.day.fmt("%02d")          ~ ' @' ~ $completed.hh-mm-ss        !! ' ', :justification<center>;
            $!grid.add-cell: $duration           ?? $duration            !! ' ', :justification<center>;
            $!grid.add-cell: $result             ?? $result              !! ' ', :justification<center>;
            $!grid.add-cell: $reason             ?? $reason              !! ' ', :justification<left>;
            $!grid.current-row++;
        }
    }
}

sub MAIN (
    Str:D   :$isp-server!,                                          #= ISP server name
    Str:D   :$isp-admin!,                                           #= ISP server name
    Int:D   :$interval      where * >= 5                = 58,       #= Refresh every --interval seconds (minimum 5s)
    Int:D   :$count                                     = 1,        #= Number of refreshes (0 is infinity)
    Bool    :$clear,                                                #= Clear the screen with each iteration
    Int:D   :$days                                      = 0,        #= BEGINDATE=TODAY-days
    Str:D   :$domain                                    = '*',      #= ISP DOMAIN name
    Str     :$node,                                                 #= ISP NODE name
    Bool    :$cache                                     = False,    #= Stash command outputs in cache
    Int     :$window-hour   where 0 <= * <= 24          = 0,        #= Daily backup window hour
    Str     :$sort-columns,
    Bool    :$csv,                                                  #= dump CSV to STDOUT
    Bool    :$gui,                                                  #= Graphical User Interface
    Bool    :$html,                                                 #= dump HTML to STDOUT
    Bool    :$json,                                                 #= dump JSON to STDOUT
#   Grid-Email-Formats  :$mail-body-format,                         #= email body format
#                       :$mail-body-format,                         #= email body format
#                       :$mail-from,                                #= email 'From:' addressee
#                       :@mail-to,                                  #= accumulate email 'To:' addressees
#                       :@mail-cc                       = (),       #= accumulate email 'Cc:' addressees
#                       :@mail-bcc                      = (),       #= accumulate email 'Bcc:' addressees
    Bool    :$text,                                                 #= TEXT print
    Bool    :$tui,                                                  #= Terminal User Interface
    Bool    :$xml,                                                  #= dump XML to STDOUT
) {
    my @sort-columns;
    @sort-columns       = $sort-columns.split(',').map({ $_.Int }) if $sort-columns;
    my @command         = ['QUERY', 'EVENT', $domain, '*', 'BEGINDATE=TODAY-' ~ $days, 'ENDDATE=TODAY', 'FORMAT=DETAILED'];
    with $window-hour {
        my $d           = DateTime.new(now);
        my $start-time  = DateTime.new(:year($d.year), :month($d.month), :day($d.day), :hour($window-hour), :0minute);
        my $end-time    = DateTime.new(:year($d.year), :month($d.month), :day($d.day), :hour($window-hour), :0minute).earlier(:seconds((60 * 60 * 24) + 1));
        @command.append: 'BEGINTIME='   ~ $start-time.hh-mm-ss;
        @command.append: 'ENDTIME='     ~ $end-time.hh-mm-ss if $days;
    }
#   my $from                = $mail-from;
#   my $format              = $mail-body-format;
#   if $mail-from && @mail-to.elems {
#       die '--mail-from=<email-address> required to send mail!' unless $mail-from;
#       die '--mail-to=<email-address[,email-address]> required to send mail!' unless @mail-to.elems;
#       $from               = $mail-from[0] if $mail-from ~~ Array;
#       $format             = $mail-body-format[0] if $mail-body-format ~~ Array;
#       $mailing = True;
#   }
    my $reporter    = Reporter.new(
                                    :$isp-server,
                                    :$isp-admin,
                                    :$count,
                                    :$clear,
                                    :$interval,
                                    :title('IBM Spectrum Protect: ' ~ $isp-server ~ ' Client Events'),
                                    :@command,
                                    :$domain,
                                    :$node,
                                    :$cache,
                                    :@sort-columns,
                                    :$csv,
                                    :$gui,
                                    :$html,
                                    :$json,
#                                   :$mail-body-format($mail-body-format ~~ Array ?? $mail-body-format[0] !! $mail-body-format),
#                                   :mail-from($mail-from ~~ Array ?? $mail-from[0] !! $mail-from),
#                                   :@mail-to,
#                                   :@mail-cc,
#                                   :@mail-bcc,
                                    :$text,
                                    :$tui,
                                    :$xml,
                                  );
    $reporter.loop;
}

=finish
